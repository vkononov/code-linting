env:
  browser: true
  es6: true
extends: ['eslint:recommended', 'plugin:react/recommended']
parser: babel-eslint
parserOptions:
  ecmaVersion: 6
  ecmaFeatures:
    experimentalObjectRestSpread: true
    jsx: true
  sourceType: module
plugins:
  - react
settings:
  react:
    version: 16.8.3

rules:
  # POSSIBLE ERROR
  # These rules relate to possible syntax or logic errors in JavaScript code:
  for-direction: 2
  getter-return: 2
  no-await-in-loop: 2
  no-compare-neg-zero: 2
  no-cond-assign: 2
  no-console: 2
  no-constant-condition: 2
  no-control-regex: 2
  no-debugger: 2
  no-dupe-args: 2
  no-dupe-keys: 2
  no-duplicate-case: 2
  no-empty: 2
  no-empty-character-class: 2
  no-ex-assign: 2
  no-extra-boolean-cast: 2
  no-extra-parens: 2
  no-extra-semi: 2
  no-func-assign: 2
  no-inner-declarations: ['error', 'both']
  no-invalid-regexp: 2
  no-irregular-whitespace: 2
  no-obj-calls: 2
  no-prototype-builtins: 2
  no-regex-spaces: 2
  no-sparse-arrays: 2
  no-template-curly-in-string: 2
  no-unexpected-multiline: 2
  no-unreachable: 2
  no-unsafe-finally: 2
  no-unsafe-negation: 2
  use-isnan: 2
  valid-jsdoc: 2
  valid-typeof: 2


  # BEST PRACTICES
  # These rules relate to better ways of doing things to help you avoid problems:
  accessor-pairs: 2
  array-callback-return: 2
  block-scoped-var: 2
  class-methods-use-this: ['error', {exceptMethods: ['componentWillMount', 'componentDidMount', 'componentWillReceiveProps', 'shouldComponentUpdate', 'componentWillUpdate', 'render', 'componentDidUpdate', 'componentWillUnmount', 'componentDidCatch']}]
  # complexity: ['error', 15]
  consistent-return: 2
  curly: 2
  default-case: 2
  dot-location: ['error', 'property']
  dot-notation: 2
  eqeqeq: 2
  guard-for-in: 2
  no-alert: 2
  no-caller: 2
  no-case-declarations: 2
  no-div-regex: 2
  no-else-return: 2
  no-empty-function: 2
  no-empty-pattern: 2
  no-eq-null: 2
  no-eval: 2
  no-extend-native: 2
  no-extra-bind: 2
  no-extra-label: 2
  no-fallthrough: 2
  no-floating-decimal: 2
  no-global-assign: 2
  no-implicit-coercion: 2
  no-implicit-globals: 2
  no-implied-eval: 2
  no-invalid-this: 0
  no-iterator: 2
  no-labels: 2
  no-lone-blocks: 2
  no-loop-func: 2
  no-magic-numbers: 0
  no-multi-spaces: 2
  no-multi-str: 2
  no-new: 2
  no-new-func: 2
  no-new-wrappers: 2
  no-octal: 2
  no-octal-escape: 2
  no-param-reassign: 2
  no-proto: 2
  no-redeclare: 2
  no-restricted-properties: 2
  no-return-assign: 2
  no-return-await: 2
  no-script-url: 2
  no-self-assign: 2
  no-self-compare: 2
  no-sequences: 2
  no-throw-literal: 2
  no-unmodified-loop-condition: 2
  no-unused-expressions: 2
  no-unused-labels: 2
  no-useless-call: 2
  no-useless-concat: 2
  no-useless-escape: 2
  no-useless-return: 2
  no-void: 2
  no-warning-comments: 2
  no-with: 2
  prefer-promise-reject-errors: 2
  radix: 2
  require-await: 2
  vars-on-top: 2
  wrap-iife: 2
  yoda: 2


  # STRICT MODE
  # These rules relate to strict mode directives:
  strict: ['error', 'global']


  # VARIABLES
  # These rules relate to variable declarations:
  # init-declarations: ['error', 'always']
  no-catch-shadow: 2
  no-delete-var: 2
  no-label-var: 2
  no-restricted-globals: 2
  no-shadow: 2
  no-shadow-restricted-names: 2
  no-undef: 2
  no-undef-init: 2
  no-undefined: 2
  no-unused-vars: 2
  no-use-before-define: 2


  # NODE.JS AND COMMONJS
  # These rules relate to code running in Node.js, or in browsers with CommonJS:
  callback-return: 2
  global-require: 2
  handle-callback-err: 2
  no-buffer-constructor: 2
  no-mixed-requires: 2
  no-new-require: 2
  no-path-concat: 2
  no-process-env: 0
  no-process-exit: 2
  no-restricted-modules: 2
  no-sync: 2


  # STYLISTIC ISSUES
  # These rules relate to style guidelines, and are therefore quite subjective:
  # array-bracket-newline: ['error', 'never']
  array-bracket-spacing: ['error', 'never']
  # array-element-newline: ['error', {multiline: true}]
  block-spacing: 2
  brace-style: ['error', 'stroustrup']
  camelcase: 2
  # capitalized-comments: 0
  comma-dangle: ['error', 'never']
  comma-spacing: 2
  comma-style: 2
  computed-property-spacing: ['error', 'never']
  consistent-this: ['error', 'null']
  eol-last: ['error', 'never']
  func-call-spacing: ['error', 'never']
  func-name-matching: ['error', 'always']
  # func-names: ['error', 'as-needed']
  func-style: ['error', 'expression']
  function-paren-newline: ['error', 'never']
  # implicit-arrow-linebreak: ['error', 'beside']
  indent: ['error', 4]
  jsx-quotes: ['error', 'prefer-single']
  key-spacing: ['error', {beforeColon: false, afterColon: true}]
  keyword-spacing: ['error', {after: true}]
  # line-comment-position: ['error', {position: 'above'}]
  linebreak-style: ['error', 'unix']
  lines-between-class-members: ['error', 'always']
  max-depth: ['error', 4]
  max-len: ['error', 120, 4]
  # max-lines: 2
  max-nested-callbacks: ['error', 2]
  max-params: ['error', 5]
  max-statements: ['error', 15]
  max-statements-per-line: ['error', {max: 2}]
  multiline-comment-style: ['error', 'starred-block']
  # multiline-ternary: ['error', 'always-multiline']
  new-cap: 2
  new-parens: 2
  # newline-per-chained-call: ['error', { 'ignoreChainWithDepth': 2 }]
  no-array-constructor: 2
  no-bitwise: 2
  no-continue: 0
  no-inline-comments: 0
  no-lonely-if: 2
  no-mixed-operators: 0
  no-mixed-spaces-and-tabs: 2
  no-multi-assign: 0
  no-multiple-empty-lines: ['error', {max: 1, maxBOF: 0, maxEOF: 0}]
  no-negated-condition: 2
  no-nested-ternary: 2
  no-new-object: 2
  no-plusplus: 0
  no-tabs: 2
  no-ternary: 0
  no-trailing-spaces: 2
  no-underscore-dangle: 0
  no-unneeded-ternary: 2
  no-whitespace-before-property: 2
  nonblock-statement-body-position: ['error', 'beside']
  # object-curly-newline: ['error', {multiline: true}]
  object-curly-spacing: ['error', 'never']
  one-var: 0
  # one-var-declaration-per-line: 2
  operator-assignment: ['error', 'always']
  operator-linebreak: 2
  padded-blocks: ['error', 'never']
  padding-line-between-statements: ['error',
                                    { blankLine: 'always', prev: '*',                    next: 'block'                },
                                    { blankLine: 'always', prev: '*',                    next: 'block'                },
                                    { blankLine: 'always', prev: '*',                    next: 'class'                },
                                    { blankLine: 'always', prev: '*',                    next: 'export'               },
                                    { blankLine: 'always', prev: '*',                    next: 'multiline-block-like' },
                                    { blankLine: 'always', prev: 'block',                next: '*'                    },
                                    { blankLine: 'always', prev: 'block-like',           next: '*'                    },
                                    { blankLine: 'always', prev: 'class',                next: '*'                    },
                                    { blankLine: 'always', prev: 'default',              next: '*'                    },
                                    { blankLine: 'always', prev: 'multiline-block-like', next: '*'                    },
                                    { blankLine: 'never',  prev: 'import',               next: 'import'               }
  ]
  quote-props: ['error', 'as-needed']
  quotes: ['error', 'single']
  require-jsdoc: 0
  semi: ['error', 'always']
  semi-spacing: ['error', {before: false, after: true}]
  semi-style: ['error', 'last']
  # sort-keys: ['error', 'asc', {natural: true}]
  sort-vars: 0
  space-before-blocks: ['error', 'always']
  space-before-function-paren: ['error', 'never']
  space-in-parens: ['error', 'never']
  space-infix-ops: 2
  space-unary-ops: ['error', {words: true, nonwords: false}]
  spaced-comment: ['error', 'always']
  switch-colon-spacing: ['error', {before: false, after: true}]
  template-tag-spacing: ['error', 'always']
  unicode-bom: ['error', 'never']
  wrap-regex: 2


  # ECMASCRIPT 6
  # These rules relate to ES6, also known as ES2015:
  arrow-body-style: ['error', 'as-needed']
  arrow-parens: ['error', 'as-needed']
  arrow-spacing: ['error', {before: true, after: true}]
  constructor-super: 0
  generator-star-spacing: ['error', {before: true, after: true}]
  no-class-assign: 2
  # no-confusing-arrow: ['error', {allowParens: true}]
  no-const-assign: 2
  no-dupe-class-members: 2
  no-duplicate-imports: 2
  no-new-symbol: 2
  no-this-before-super: 2
  no-useless-computed-key: 2
  no-useless-constructor: 2
  no-useless-rename: 2
  no-var: 2
  object-shorthand: 0
  prefer-arrow-callback: 2
  prefer-const: 2
  prefer-numeric-literals: 2
  prefer-rest-params: 2
  prefer-spread: 2
  prefer-template: 2
  require-yield: 2
  rest-spread-spacing: 2
  # sort-imports: 2
  symbol-description: 2
  template-curly-spacing: 2
  yield-star-spacing: ['error', {before: true, after: true}]


  # ESLINT-PLUGIN-REACT
  react/boolean-prop-naming: 'error'
  react/button-has-type: 'error'
  react/default-props-match-prop-types: 'error'
  # react/destructuring-assignment: 'error'
  react/display-name: 'error'
  # react/forbid-component-props: 'error'
  react/forbid-elements: 'error'
  # react/forbid-prop-types: 'error'
  react/forbid-foreign-prop-types: 'error'
  # react/no-access-state-in-setstate: 'error'
  react/no-array-index-key: 'error'
  react/no-children-prop: 'error'
  react/no-danger: 'error'
  react/no-danger-with-children: 'error'
  react/no-deprecated: 'warn'
  react/no-did-mount-set-state: 'error'
  react/no-did-update-set-state: 'error'
  react/no-direct-mutation-state: 'error'
  react/no-find-dom-node: 'error'
  react/no-is-mounted: 'error'
  # react/no-multi-comp: 'error'
  react/no-redundant-should-component-update: 'error'
  react/no-render-return-value: 'error'
  # react/no-set-state: 'error'
  react/no-typos: 'error'
  react/no-string-refs: 'error'
  react/no-unescaped-entities: 'error'
  react/no-unknown-property: 'error'
  # react/no-unused-prop-types: 'error'
  react/no-unused-state: 'error'
  react/no-will-update-set-state: 'error'
  react/prefer-es6-class: 'error'
  react/prefer-stateless-function: 'error'
  react/prop-types: 'error'
  react/react-in-jsx-scope: 'error'
  # react/require-default-props: 'error'
  # react/require-optimization: 'error'
  react/require-render-return: 'error'
  react/self-closing-comp: 'error'
  react/sort-comp: 'error'
  react/sort-prop-types: 'error'
  react/style-prop-object: 'error'
  react/void-dom-elements-no-children: 'error'


  # JSX-specific rules
  react/jsx-boolean-value: 'error'
  # react/jsx-closing-bracket-location: 'error'
  # react/jsx-closing-tag-location: 'error'
  react/jsx-curly-spacing: 'error'
  react/jsx-equals-spacing: 'error'
  # react/jsx-filename-extension: 'error'
  # react/jsx-first-prop-new-line: 'error'
  # react/jsx-handler-names: 'error'
  # react/jsx-indent: 'error'
  react/jsx-indent-props: 'error'
  react/jsx-key: 'error'
  # react/jsx-max-props-per-line: 'error'
  # react/jsx-no-bind: 'error'
  react/jsx-no-comment-textnodes: 'error'
  react/jsx-no-duplicate-props: 'error'
  # react/jsx-no-literals: 'error'
  react/jsx-no-target-blank: 'error'
  react/jsx-no-undef: 'error'
  react/jsx-curly-brace-presence: 'error'
  react/jsx-pascal-case: 'error'
  react/jsx-sort-props: 'error'
  react/jsx-tag-spacing: ['error', {closingSlash: 'never', beforeSelfClosing: 'never', afterOpening: 'never'}]
  react/jsx-uses-react: 'error'
  react/jsx-uses-vars: 'error'
  # react/jsx-wrap-multilines: 'error'